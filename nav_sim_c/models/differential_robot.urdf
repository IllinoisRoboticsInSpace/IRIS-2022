<?xml version="1.0"?>
<robot name="differential_robot" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Define robot constants in meters-->
    <xacro:property name="base_inner_width" value="0.281432"/><!-- Along x axis -->
    <xacro:property name="base_outer_width" value="0.5842"/><!-- Along x axis -->
    <xacro:property name="base_length" value="0.917575"/><!-- Along y axis -->
    <xacro:property name="base_height" value="0.509778"/><!-- Along z axis -->
    <xacro:property name="base_ground_height_zoffset" value="0.054356"/><!-- Along z axis -->

    <xacro:property name="wheel_radius" value="0.087757"/>
    <xacro:property name="wheel_width" value="0.0956564"/>
    <xacro:property name="wheel_to_chassis_gap" value="0.054864"/><!-- Along x axis -->
    <xacro:property name="wheel_ygap" value="0.540004"/><!-- Along y axis distance between axis of rotation-->
    <xacro:property name="wheel_xgap" value="0.39116"/>

    <!-- Camera positioning in meters-->
    <xacro:property name="camera_z" value="0.38735"/><!-- Along z axis distance between bar and bottom of frame-->
    <xacro:property name="camera_y" value="0.136398"/><!-- From axel of the front wheel to the y value of the frame-->
    <xacro:property name="camera_y_from_center_of_robot" value="${camera_y + wheel_ygap/2}"/>

    <!-- Define inertial robot constants in kg-->
    <xacro:property name="wheel_mass" value="1.0"/>
    <xacro:property name="base_mass" value="${10.0 - wheel_mass}"/>

    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${base_inner_width} ${base_length} ${base_height}"/>
            </geometry>
            <material name="UIUCBlue">
                <color rgba=".19 .41 .75 1.0"/>
            </material>
        </visual>

        <collision>
            <geometry>
              <box size="${base_inner_width} ${base_length} ${base_height}"/>
            </geometry>
        </collision>

        <xacro:box_inertia m="${base_mass}" w="${base_inner_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <!-- Robot Footprint -->
    <link name="base_footprint"/>

    <joint name="base_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0.0 0.0 ${-(base_height / 2 + base_ground_height_zoffset)}" rpy="0 0 0"/>
    </joint>

    <!-- Wheels -->
    <xacro:macro name="wheel" params="name y_reflect">
        <link name="${name}_y_plus_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/> 
                <geometry>
                  <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
        
            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${name}_y_plus_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${name}_y_plus_link"/>
            <origin xyz="${y_reflect*(base_inner_width/2 + wheel_to_chassis_gap)} ${wheel_ygap/2} ${-base_height / 2 - base_ground_height_zoffset + wheel_radius}" rpy="0 0 0"/>
            <axis xyz="1 0 0"/>
        </joint>

        <link name="${name}_y_minus_link">
            <visual>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/> 
                <geometry>
                  <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${name}_y_minus_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${name}_y_minus_link"/>
            <origin xyz="${y_reflect*(base_inner_width/2 + wheel_to_chassis_gap)} ${-wheel_ygap/2} ${-base_height / 2 - base_ground_height_zoffset + wheel_radius}" rpy="0 0 0"/>
            <axis xyz="1 0 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel name="drivewhl_l" y_reflect="-1" />
    <xacro:wheel name="drivewhl_r" y_reflect="1" />

    <link name="imu_link">
        <visual>
          <geometry>
            <box size="0.1 0.1 0.1"/>
          </geometry>
        </visual>
      
        <collision>
          <geometry>
            <box size="0.1 0.1 0.1"/>
          </geometry>
        </collision>
      
        <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>
      </link>
      
      <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 0.01"/>
      </joint>
      
       <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
         <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
            <ros>
              <namespace>/demo</namespace>
              <remapping>~/out:=imu</remapping>
            </ros>
            <initial_orientation_as_reference>false</initial_orientation_as_reference>
          </plugin>
          <always_on>true</always_on>
          <update_rate>100</update_rate>
          <visualize>true</visualize>
          <imu>
            <angular_velocity>
              <x>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </x>
              <y>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </y>
              <z>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>2e-4</stddev>
                  <bias_mean>0.0000075</bias_mean>
                  <bias_stddev>0.0000008</bias_stddev>
                </noise>
              </z>
            </angular_velocity>
            <linear_acceleration>
              <x>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </x>
              <y>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </y>
              <z>
                <noise type="gaussian">
                  <mean>0.0</mean>
                  <stddev>1.7e-2</stddev>
                  <bias_mean>0.1</bias_mean>
                  <bias_stddev>0.001</bias_stddev>
                </noise>
              </z>
            </linear_acceleration>
          </imu>
        </sensor>
      </gazebo>

</robot>